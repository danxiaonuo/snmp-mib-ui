# 本地构建优化版 Dockerfile - 优先使用已构建的二进制文件
# 使用轻量级 Alpine 基础镜像而不是完整的 Go 镜像
FROM alpine:latest

# 安装运行时依赖
RUN apk add --no-cache \
    ca-certificates \
    tzdata \
    curl \
    wget \
    && rm -rf /var/cache/apk/*

# 创建应用用户（安全最佳实践）
RUN addgroup -g 1001 -S appgroup && \
    adduser -u 1001 -S appuser -G appgroup

# 设置时区和环境变量
ENV TZ=Asia/Shanghai
ENV ENVIRONMENT=production
ENV PORT=8080
ENV GIN_MODE=release

# 创建应用目录并设置权限
RUN mkdir -p /app/uploads /app/mibs /var/log/mibweb && \
    chown -R appuser:appgroup /app /var/log/mibweb

WORKDIR /app

# 复制必要的配置文件和二进制文件
COPY config/ ./config/ 2>/dev/null || true
COPY migrations/ ./migrations/ 2>/dev/null || true
COPY mib-platform ./main

# 设置二进制文件权限
RUN chown appuser:appgroup ./main && chmod +x ./main

# 切换到非 root 用户
USER appuser

# 暴露端口
EXPOSE 8080

# 健康检查
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD wget --no-verbose --tries=1 --spider http://localhost:8080/health || exit 1

# 运行应用 - 优先使用预构建的二进制文件
CMD if [ -f "./main" ]; then \
        echo "使用预构建的二进制文件启动..." && ./main; \
    else \
        echo "错误: 未找到预构建的二进制文件，请先在本地构建"; \
        exit 1; \
    fi