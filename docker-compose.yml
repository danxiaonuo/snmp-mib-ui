
services:
  # PostgreSQL 数据库
  postgres:
    image: postgres:15-alpine
    container_name: mibweb-postgres
    environment:
      POSTGRES_DB: network_monitor
      POSTGRES_USER: netmon_user
      POSTGRES_PASSWORD: netmon_pass_2024
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
    networks:
      - mibweb-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U netmon_user -d network_monitor"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis 缓存
  redis:
    image: redis:7-alpine
    container_name: mibweb-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf --requirepass redis_pass_2024
    networks:
      - mibweb-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "redis_pass_2024", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Next.js 前端应用
  frontend:
    build:
      context: .
      dockerfile: ${FRONTEND_DOCKERFILE:-Dockerfile.production}
    container_name: mibweb-frontend
    ports:
      - "12300:12300"
    environment:
      - NODE_ENV=production
      - NEXT_TELEMETRY_DISABLED=1
      - DATABASE_URL=postgresql://netmon_user:netmon_pass_2024@postgres:5432/network_monitor
      - REDIS_URL=redis://:redis_pass_2024@redis:6379
      - NEXTAUTH_SECRET=mibweb_secret_key_2024_very_secure
      - NEXTAUTH_URL=${NEXTAUTH_URL:-http://localhost:12300}
      - API_BASE_URL=http://backend:8080
      - NEXT_PUBLIC_BACKEND_BASE_URL=http://backend:8080
      - NEXT_PUBLIC_BACKEND_URL=${NEXT_PUBLIC_BACKEND_URL:-http://localhost:17880}
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL:-http://localhost:17880/api/v1}
      - HOSTNAME=0.0.0.0
      - PORT=12300
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - mibweb-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:12300/api/health || curl -f http://localhost:12300/ || exit 1"]
      interval: 30s
      timeout: 10s
      start_period: 120s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 3G
          cpus: '3.0'
        reservations:
          memory: 1.5G
          cpus: '2.0'

  # Go 后端 API
  backend:
    build:
      context: ./backend
      dockerfile: ${BACKEND_DOCKERFILE:-Dockerfile.optimized}
      args:
        USE_LOCAL_BUILD: ${USE_LOCAL_BUILD:-true}
        GO_VERSION: ${GO_VERSION:-1.23.10}
    container_name: mibweb-backend
    ports:
      - "17880:8080"
    environment:
      - ENVIRONMENT=production
      - PORT=8080
      - DATABASE_URL=postgresql://netmon_user:netmon_pass_2024@postgres:5432/network_monitor
      - REDIS_URL=redis://:redis_pass_2024@redis:6379
      - JWT_SECRET=jwt_secret_key_2024_very_secure
      - CORS_ORIGINS=http://localhost:12300,http://frontend:3000
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - mibweb-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '2.0'
        reservations:
          memory: 1G
          cpus: '1.0'

  # Nginx 反向代理 (临时禁用)
  # nginx:
  #   image: nginx:alpine
  #   container_name: mibweb-nginx
  #   ports:
  #     - "80:80"
  #     - "443:443"
  #   volumes:
  #     - ./nginx/nginx.conf:/etc/nginx/nginx.conf
  #     - ./nginx/ssl:/etc/nginx/ssl
  #   depends_on:
  #     - frontend
  #   networks:
  #     - mibweb-network
  #   restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  mibweb-network:
    driver: bridge
